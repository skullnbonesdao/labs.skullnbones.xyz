import{d as w,bX as $}from"./index.ca3a514a.js";import{P as x,y as _,A as I,r as q}from"./solana-wallets-vue.e6bb8111.js";import{m as g,P,s as B,S as U,n as C,k as D,o as G,p as Z}from"./constants.e42f5a75.js";const z={version:"0.7.1",name:"player_profile",instructions:[{name:"acceptRoleInvitation",accounts:[{name:"newMember",isMut:!1,isSigner:!1,docs:["The new member"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role which the player is joining"]},{name:"roleMembershipAccount",isMut:!0,isSigner:!1,docs:["The role membership account for the new member"]}],args:[{name:"keyIndex",type:"u16"},{name:"keyIndexInRoleAccount",type:"u16"},{name:"keyIndexInMembershipAccount",type:"u16"}]},{name:"addExistingMemberToRole",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for reallocation."]},{name:"newMember",isMut:!1,isSigner:!1,docs:["The profile of the member to be added to the role"]},{name:"profile",isMut:!1,isSigner:!1,docs:["The profile which the role belongs to."]},{name:"roleMembershipAccount",isMut:!0,isSigner:!1,docs:["The role membership account for the new member"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role which the player is joining"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"},{name:"keyIndexInMembershipAccount",type:"u16"}]},{name:"addKeys",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the profile."]},{name:"key",isMut:!1,isSigner:!0,docs:["Key with [`ProfilePermissions::ADD_KEYS`] permission to add keys."]},{name:"profile",isMut:!0,isSigner:!1,docs:["The profile to add to"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyAddIndex",type:"u16"},{name:"keyPermissionsIndex",type:"u16"},{name:"keysToAdd",type:{vec:{defined:"AddKeyInput"}}}]},{name:"adjustAuth",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the profile."]},{name:"profile",isMut:!0,isSigner:!1,docs:["The profile to create"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"authIndexes",type:{vec:"u16"}},{name:"newKeyPermissions",type:{vec:{defined:"AddKeyInput"}}},{name:"removeRange",type:{array:["u16",2]}},{name:"newKeyThreshold",type:"u8"}]},{name:"createProfile",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the new profile."]},{name:"profile",isMut:!0,isSigner:!0,docs:["The profile to create"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyPermissions",type:{vec:{defined:"AddKeyInput"}}},{name:"keyThreshold",type:"u8"}]},{name:"createRole",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the transaction"]},{name:"profile",isMut:!0,isSigner:!1,docs:["The [`Profile`] account that the role is being created for"]},{name:"newRoleAccount",isMut:!0,isSigner:!1,docs:["The role account being created"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"}]},{name:"inviteMemberToRole",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the new profile."]},{name:"newMember",isMut:!1,isSigner:!1,docs:["The profile of the user to be added to the role"]},{name:"profile",isMut:!1,isSigner:!1,docs:["The profile which the role belongs to."]},{name:"roleMembershipAccount",isMut:!0,isSigner:!1,docs:["The role membership account for the new member"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role which the player is joining"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"}]},{name:"joinRole",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the new profile."]},{name:"newMember",isMut:!1,isSigner:!1,docs:["The new member joining the role"]},{name:"roleMembershipAccount",isMut:!0,isSigner:!1,docs:["The role membership account for the new member"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role which the player is joining"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"}]},{name:"leaveRole",accounts:[{name:"funder",isMut:!0,isSigner:!1,docs:["The funder to receive the rent allocation."]},{name:"member",isMut:!1,isSigner:!1,docs:["The member leaving the role"]},{name:"roleMembershipAccount",isMut:!0,isSigner:!1,docs:["The role membership account for the member"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role which the player is leaving"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"},{name:"keyIndexInRoleAccount",type:"u16"},{name:"keyIndexInMembershipAccount",type:"u16"}]},{name:"removeKeys",accounts:[{name:"funder",isMut:!0,isSigner:!1,docs:["The funder for the profile."]},{name:"key",isMut:!1,isSigner:!0,docs:["Key with [`ProfilePermissions::REMOVE_KEYS`] permission to add keys."]},{name:"profile",isMut:!0,isSigner:!1,docs:["The profile to remove from"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"},{name:"keysToRemove",type:{array:["u16",2]}}]},{name:"removeMemberFromRole",accounts:[{name:"funder",isMut:!0,isSigner:!1,docs:["The funder to receive the rent allocation"]},{name:"member",isMut:!1,isSigner:!1,docs:["The profile of the user to be added to the role"]},{name:"profile",isMut:!1,isSigner:!1,docs:["The profile which the role belongs to."]},{name:"roleMembershipAccount",isMut:!0,isSigner:!1,docs:["The role membership account for the member"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role which the player is being removed from"]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program"]}],args:[{name:"keyIndex",type:"u16"},{name:"keyIndexInRoleAccount",type:"u16"},{name:"keyIndexInMembershipAccount",type:"u16"}]},{name:"removeRole",accounts:[{name:"funder",isMut:!0,isSigner:!1,docs:["The funder for the transaction"]},{name:"profile",isMut:!0,isSigner:!1,docs:["The Profile that the role is being removed from"]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role being removed"]},{name:"roleNameAccount",isMut:!0,isSigner:!1,docs:["The role name account (if it exists)"]}],args:[{name:"roleNameBump",type:"u8"},{name:"keyIndex",type:"u16"}]},{name:"setName",accounts:[{name:"key",isMut:!1,isSigner:!0,docs:["The key authorized to change the name."]},{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the name size change."]},{name:"profile",isMut:!1,isSigner:!1,docs:["The profile to set the name for."]},{name:"name",isMut:!0,isSigner:!1,docs:["The name account."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program."]}],args:[{name:"keyIndex",type:"u16"},{name:"name",type:"bytes"}]},{name:"setRoleAcceptingMembers",accounts:[{name:"profile",isMut:!1,isSigner:!1,docs:["The profile which owns the role being modified."]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role account to set as accepting members."]}],args:[{name:"keyIndex",type:"u16"}]},{name:"setRoleAuthorizer",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the name size change."]},{name:"profile",isMut:!1,isSigner:!1,docs:["The profile to set the name for."]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role account to set the authorizer for."]},{name:"authorizer",isMut:!1,isSigner:!1,docs:["The authorizer account to set."]}],args:[{name:"keyIndex",type:"u16"}]},{name:"setRoleName",accounts:[{name:"funder",isMut:!0,isSigner:!0,docs:["The funder for the name size change."]},{name:"profile",isMut:!1,isSigner:!1,docs:["The profile which the role belongs to"]},{name:"role",isMut:!1,isSigner:!1,docs:["The role to set the name for."]},{name:"name",isMut:!0,isSigner:!1,docs:["The name account."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["The system program."]}],args:[{name:"keyIndex",type:"u16"},{name:"name",type:"bytes"}]},{name:"setRoleNotAcceptingMembers",accounts:[{name:"profile",isMut:!1,isSigner:!1,docs:["The profile which owns the role being modified."]},{name:"roleAccount",isMut:!0,isSigner:!1,docs:["The role account to set as not accepting members."]}],args:[{name:"keyIndex",type:"u16"}]}],accounts:[{name:"playerName",docs:["Stores a player's name on-chain."],type:{kind:"struct",fields:[{name:"version",docs:["The data version of this account."],type:"u8"},{name:"profile",docs:["The profile this name is for."],type:"publicKey"},{name:"bump",docs:["The bump for this account."],type:"u8"}]}},{name:"profile",docs:["A player profile."],type:{kind:"struct",fields:[{name:"version",docs:["The data version of this account."],type:"u8"},{name:"authKeyCount",docs:["The number of auth keys on the account"],type:"u16"},{name:"keyThreshold",docs:["The number of auth keys needed to update the profile."],type:"u8"},{name:"nextSeqId",docs:["The next sequence number for a new role."],type:"u64"},{name:"createdAt",docs:["When the profile was created."],type:"i64"}]}},{name:"profileRoleMembership",docs:["A player's roles for a given profile","Remaining data contains an unordered list of [`RoleMembership`](RoleMembership) structs"],type:{kind:"struct",fields:[{name:"version",docs:["The data version of this account."],type:"u8"},{name:"profile",docs:["The Profile this belongs to"],type:"publicKey"},{name:"member",docs:["The member's profile pubkey"],type:"publicKey"},{name:"bump",docs:["PDA bump"],type:"u8"}]}},{name:"role",docs:["A Role associated with a Profile. A Role contains an unordered list of Role Members in its","remaining data which lists all of the members who carry this role."],type:{kind:"struct",fields:[{name:"version",docs:["The data version of this account."],type:"u8"},{name:"profile",docs:["Profile that this role belongs to"],type:"publicKey"},{name:"authorizer",docs:["Origin authority of the account"],type:"publicKey"},{name:"roleSeqId",docs:["Role's seq_id"],type:"u64"},{name:"acceptingNewMembers",docs:["Is role accepting new members"],type:"u8"},{name:"bump",docs:["The name of the rank","TODO: Add instruction to use `player-name` as the label","PDA bump"],type:"u8"}]}}],types:[{name:"AddKeyInput",docs:["Struct for adding a key"],type:{kind:"struct",fields:[{name:"scope",docs:["The block of permissions"],type:"publicKey"},{name:"expireTime",docs:["The expire time of the key to add"],type:"i64"},{name:"permissions",docs:["The permissions for the key"],type:{array:["u8",8]}}]}},{name:"MemberStatus",docs:["Represents potential membership statuses for a player with a role"],type:{kind:"enum",variants:[{name:"Inactive"},{name:"Active"}]}},{name:"ProfileKey",docs:["A key on a profile."],type:{kind:"struct",fields:[{name:"key",docs:["The key."],type:"publicKey"},{name:"scope",docs:["The key for the permissions."],type:"publicKey"},{name:"expireTime",docs:["The expire time for this key.","If `<0` does not expire."],type:"i64"},{name:"permissions",docs:["The permissions for the key."],type:{array:["u8",8]}}]}},{name:"RoleMembership",docs:["Represents a member's status in a role"],type:{kind:"struct",fields:[{name:"key",docs:["The member or role key associated with this membership"],type:"publicKey"},{name:"status",docs:["The member's role status"],type:"u8"}]}}],errors:[{code:6e3,name:"KeyIndexOutOfBounds",msg:"Key index out of bounds"},{code:6001,name:"ProfileMismatch",msg:"Profile did not match profile key"},{code:6002,name:"KeyMismatch",msg:"Key did not match profile key"},{code:6003,name:"ScopeMismatch",msg:"Scope did not match profile scope"},{code:6004,name:"KeyExpired",msg:"Key expired"},{code:6005,name:"KeyMissingPermissions",msg:"Key is missing permissions"},{code:6006,name:"PermissionsMismatch",msg:"Permissions don't match available"},{code:6007,name:"AuthKeyCannotExpire",msg:"Auth keys cannot expire"},{code:6008,name:"AuthKeyMustSign",msg:"New auth keys must be signers"},{code:6009,name:"DuplicateAuthKey",msg:"Duplicate key when adjusting auth keys"},{code:6010,name:"RoleAuthorityAlreadySet",msg:"Role authority has already been set"},{code:6011,name:"RoleNotAcceptingMembers",msg:"Role is not accepting new members"},{code:6012,name:"RoleMembershipMismatch",msg:"Role membership is not as expected"},{code:6013,name:"RoleLimitExceeded",msg:"Role limit exceeded"},{code:6014,name:"RoleHasMembers",msg:"Cannot remove role with members"},{code:6015,name:"FeatureNotImplemented",msg:"This feature is not yet support"}]};var Y=Object.defineProperty,H=Object.getOwnPropertyDescriptor,X=(e,r,s,i)=>{for(var t=i>1?void 0:i?H(r,s):r,n=e.length-1,a;n>=0;n--)(a=e[n])&&(t=(i?a(r,s,t):a(t))||t);return i&&t&&Y(r,s,t),t};let T=class{constructor(e,r,s){this._data=e,this._key=r,this._name=s}static ACCOUNT_NAME="playerName";static MIN_DATA_SIZE=8+1+32+1;get data(){return this._data}get key(){return this._key}get name(){return this._name}static findAddress(e,r){return x.findProgramAddressSync([w.Buffer.from("player_name"),r.toBuffer()],e.programId)}static decodeData(e,r){return g.decodeAccountWithRemaining(e,r,T,s=>new TextDecoder().decode(s))}};T=X([g.staticImplements()],T);var J=Object.defineProperty,Q=Object.getOwnPropertyDescriptor,O=(e,r,s,i)=>{for(var t=i>1?void 0:i?Q(r,s):r,n=e.length-1,a;n>=0;n--)(a=e[n])&&(t=(i?a(r,s,t):a(t))||t);return i&&t&&J(r,s,t),t};const L=32+32+8+8;let l=class{constructor(e,r,s,i,t,n,a,m,o,f,c,u){this.auth=e,this.addKeys=r,this.removeKeys=s,this.changeName=i,this.createRole=t,this.removeRole=n,this.setAuthorizer=a,this.joinRole=m,this.leaveRole=o,this.toggleAcceptingMembers=f,this.addMember=c,this.removeMember=u}static auth(){return new l(!0,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1)}static addKeys(){return new l(!1,!0,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1)}static removeKeys(){return new l(!1,!1,!0,!1,!1,!1,!1,!1,!1,!1,!1,!1)}static changeName(){return new l(!1,!1,!1,!0,!1,!1,!1,!1,!1,!1,!1,!1)}static createRole(){return new l(!1,!1,!1,!1,!0,!1,!1,!1,!1,!1,!1,!1)}static removeRole(){return new l(!1,!1,!1,!1,!1,!0,!1,!1,!1,!1,!1,!1)}static setAuthorizer(){return new l(!1,!1,!1,!1,!1,!1,!0,!1,!1,!1,!1,!1)}static joinRole(){return new l(!1,!1,!1,!1,!1,!1,!1,!0,!1,!1,!1,!1)}static leaveRole(){return new l(!1,!1,!1,!1,!1,!1,!1,!1,!0,!1,!1,!1)}static toggleAcceptingMembers(){return new l(!1,!1,!1,!1,!1,!1,!1,!1,!1,!0,!1,!1)}static addMembers(){return new l(!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!0,!1)}static removeMembers(){return new l(!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!0)}getPermissions(){const e=g.fixedSizeArray(8,0);return e[0]=(this.auth?1<<0:0)|(this.addKeys?1<<1:0)|(this.removeKeys?1<<2:0)|(this.changeName?1<<3:0)|(this.createRole?1<<4:0)|(this.removeRole?1<<5:0)|(this.setAuthorizer?1<<6:0)|(this.joinRole?1<<7:0),e[1]=(this.leaveRole?1<<0:0)|(this.toggleAcceptingMembers?1<<1:0)|(this.addMember?1<<2:0)|(this.removeMember?1<<3:0),e}static empty(){return new l(!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1)}static all(){return new l(!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0)}static fromPermissions(e){return new l((e[0]&1<<0)!==0,(e[0]&1<<1)!==0,(e[0]&1<<2)!==0,(e[0]&1<<3)!==0,(e[0]&1<<4)!==0,(e[0]&1<<5)!==0,(e[0]&1<<6)!==0,(e[0]&1<<7)!==0,(e[1]&1<<0)!==0,(e[1]&1<<1)!==0,(e[1]&1<<2)!==0,(e[1]&1<<3)!==0)}and(e){return new l(this.auth&&e.auth,this.addKeys&&e.addKeys,this.removeKeys&&e.removeKeys,this.changeName&&e.changeName,this.createRole&&e.createRole,this.removeRole&&e.removeRole,this.setAuthorizer&&e.setAuthorizer,this.joinRole&&e.joinRole,this.leaveRole&&e.leaveRole,this.toggleAcceptingMembers&&e.toggleAcceptingMembers,this.addMember&&e.addMember,this.removeMember&&e.removeMember)}or(e){return new l(this.auth||e.auth,this.addKeys||e.addKeys,this.removeKeys&&e.removeKeys,this.changeName||e.changeName,this.createRole||e.createRole,this.removeRole||e.removeRole,this.setAuthorizer||e.setAuthorizer,this.joinRole||e.joinRole,this.leaveRole||e.leaveRole,this.toggleAcceptingMembers||e.toggleAcceptingMembers,this.addMember||e.addMember,this.removeMember||e.removeMember)}eq(e){return this.auth===e.auth&&this.addKeys===e.addKeys&&this.removeKeys==e.removeKeys&&this.changeName===e.changeName&&this.createRole===e.createRole&&this.removeRole===e.removeRole&&this.setAuthorizer===e.setAuthorizer&&this.joinRole===e.joinRole&&this.leaveRole===e.leaveRole&&this.toggleAcceptingMembers===e.toggleAcceptingMembers&&this.addMember===e.addMember&&this.removeMember===e.removeMember}contains(e){return(!e.auth||this.auth)&&(!e.addKeys||this.addKeys)&&(!e.removeKeys||this.removeKeys)&&(!e.changeName||this.changeName)&&(!e.createRole||this.createRole)&&(!e.removeRole||this.removeRole)&&(!e.setAuthorizer||this.setAuthorizer)&&(!e.joinRole||this.joinRole)&&(!e.leaveRole||this.leaveRole)&&(!e.toggleAcceptingMembers||this.toggleAcceptingMembers)&&(!e.addMember||this.addMember)&&(!e.removeMember||this.removeMember)}};l=O([g.staticImplements()],l);function M(e,r,s){return"keyIndex"in e?e:{...e,validScopes:r,requiredPermissions:s}}function k(e,r){if("keyIndex"in e)return e;{const{key:s,profile:i,validScopes:t,requiredPermissions:n}=e,m=i.profileKeys.findIndex(o=>{const f=o.key.equals(s.publicKey()),c=o.scope.equals(e.playerProfileProgram.programId)&&l.fromPermissions(o.permissions).contains(l.auth()),u=()=>{for(const y of t)if(y.equals(o.scope))return!0;return!1},d=()=>r.fromPermissions(o.permissions).contains(n);return f&&(c||u()&&d())});return m===-1?{error:"cannot find key"}:{profileKey:i.key,key:s,keyIndex:m}}}let N=class{constructor(e,r,s){this._data=e,this._key=r,this._profileKeys=s}static ACCOUNT_NAME="profile";static MIN_DATA_SIZE=8+1+2+1+8+8;get data(){return this._data}get key(){return this._key}get profileKeys(){return this._profileKeys}static createProfile(e,r,s,i){return async t=>({instruction:await e.methods.createProfile(s.map(n=>{if(n.expireTime!==null&&n.expireTime.lt(new _(0)))throw new Error("expire time will result in negation. Use explicitly null instead");return{scope:n.scope,expireTime:n.expireTime===null?new _(-1):n.expireTime,permissions:n.permissions.getPermissions()}}),i).accountsStrict({funder:t.publicKey(),profile:r.publicKey(),systemProgram:I.programId}).remainingAccounts(s.map(n=>g.isAsyncSigner(n.key)?{pubkey:n.key.publicKey(),isSigner:!0,isWritable:!1}:{pubkey:n.key,isSigner:!1,isWritable:!1})).instruction(),signers:[t,r,...s.map(n=>n.key).filter(g.isAsyncSigner)]})}static createRole(e,r,s,i){const t=k(M(r,[e.programId],l.changeName()),l);if("error"in t)throw t.error;const{profileKey:n,key:a,keyIndex:m}=t;return{instructions:async o=>[{instruction:await e.methods.createRole(m).accountsStrict({funder:o.publicKey(),profile:n,systemProgram:I.programId,newRoleAccount:s[0]}).remainingAccounts([{pubkey:a.publicKey(),isSigner:!0,isWritable:!1}].concat(p(i))).instruction().then(c=>h(c,i)),signers:[o,a]}],role:s}}static removeRole(e,r,s,i){const t=k(M(r,[e.programId],l.changeName()),l);if("error"in t)throw t.error;const{profileKey:n,key:a,keyIndex:m}=t,[o,f]=T.findAddress(e,s);return async c=>[{instruction:await e.methods.removeRole(f,m).accountsStrict({funder:c.publicKey(),profile:n,roleAccount:s,roleNameAccount:o}).remainingAccounts([{pubkey:a.publicKey(),isSigner:!0,isWritable:!1}].concat(p(i))).instruction().then(u=>h(u,i)),signers:[c,a]}]}static setName(e,r,s,i){const t=k(M(r,[e.programId],l.changeName()),l);if("error"in t)throw t.error;const{profileKey:n,key:a,keyIndex:m}=t,o=T.findAddress(e,n);return{instructions:async f=>[{instruction:await e.methods.setName(m,w.Buffer.from(new TextEncoder().encode(s))).accountsStrict({key:a.publicKey(),funder:f.publicKey(),profile:n,name:o[0],systemProgram:I.programId}).remainingAccounts(p(i)).instruction().then(c=>h(c,i)),signers:[f,a]}],name:o}}static addKeys(e,r,s,i,t,n,a){const m=n.reduce((c,u)=>c.or(u.permissions),i.empty()),{addKeyIndex:o,permissionsKeyIndex:f}=s.profileKeys.reduce((c,u,d)=>{if(c.addKeyIndex!==null&&c.permissionsKeyIndex!==null)return c;if(u.key.equals(r.publicKey())){if(u.scope.equals(e.programId)){const y=l.fromPermissions(u.permissions);if(y.auth)return{addKeyIndex:d,permissionsKeyIndex:d};y.addKeys&&(c.addKeyIndex=d)}t.equals(u.scope)&&m.and(i.fromPermissions(u.permissions)).eq(m)&&(c.permissionsKeyIndex=d)}return c},{addKeyIndex:null,permissionsKeyIndex:null});if(o===null||f===null)throw new Error("key does not have permissions to add given keys");return async c=>[{instruction:await e.methods.addKeys(o,f,n.map(u=>({scope:t,expireTime:u.expireTime===null?new _(-1):u.expireTime,permissions:u.permissions.getPermissions()}))).accountsStrict({funder:c.publicKey(),profile:s.key,key:r.publicKey(),systemProgram:I.programId}).remainingAccounts(n.map(u=>({pubkey:u.key,isSigner:!1,isWritable:!1})).concat(p(a))).instruction().then(u=>h(u,a)),signers:[c,r]}]}static removeKeys(e,r,s,i,t){const n=k(M(r,[e.programId],l.removeKeys()),l);if("error"in n)throw n.error;const{profileKey:a,key:m,keyIndex:o}=n;return async f=>({instruction:await e.methods.removeKeys(o,i).accountsStrict({funder:s==="funder"?f.publicKey():s,key:m.publicKey(),profile:a,systemProgram:I.programId}).remainingAccounts(p(t)).instruction().then(c=>h(c,t)),signers:[m]})}static adjustAuth(e,r,s,i,t,n){if(r.length===0)throw new Error("no keys provided");const a=r.map(u=>k(M(u,[e.programId],l.auth()),l)),m=a.filter(u=>"error"in u);if(m.length>0)throw m[0].error;const o=a;let f=null;for(const u of o)if(f===null)f=u.profileKey;else if(!f.equals(u.profileKey))throw new Error("keys are not from the same profile");if(f===null)throw new Error("no keys provided after profile key");const c=s.map(u=>u(({key:d,expireTime:y,scope:b,permissions:A})=>{if(y!==null&&y.lt(new _(0)))throw new Error("expire time will result in negation. Use explicitly null instead");return[{scope:b,expireTime:y===null?new _(-1):y,permissions:A.getPermissions()},d]}));return async u=>({instruction:await e.methods.adjustAuth(o.map(d=>d.keyIndex),c.map(([d])=>d),i,t).accountsStrict({funder:u.publicKey(),profile:f,systemProgram:I.programId}).remainingAccounts([...o.map(d=>({pubkey:d.key.publicKey(),isSigner:!0,isWritable:!1})),...c.map(([d,y])=>({pubkey:y,isSigner:!1,isWritable:!1}))].concat(p(n))).instruction().then(d=>h(d,n)),signers:[u,...o.map(d=>d.key)]})}static decodeData(e,r){return g.decodeAccountWithRemaining(e,r,N,(s,i)=>{const t=s.readUint16LE();return s=s.subarray(2),Array(t).fill(0).map((n,a)=>r.coder.types.decode("ProfileKey",s.subarray(L*a).subarray(0,L)))})}};N=O([g.staticImplements()],N);var ee=Object.defineProperty,se=Object.getOwnPropertyDescriptor,re=(e,r,s,i)=>{for(var t=i>1?void 0:i?se(r,s):r,n=e.length-1,a;n>=0;n--)(a=e[n])&&(t=(i?a(r,s,t):a(t))||t);return i&&t&&ee(r,s,t),t},K=(e=>(e[e.Inactive=0]="Inactive",e[e.Active=1]="Active",e))(K||{});const E=32+1;let v=class{constructor(e,r,s){this._data=e,this._key=r,this._roleMemberships=s}static ACCOUNT_NAME="profileRoleMembership";static MIN_DATA_SIZE=8+1+32+32+1;get data(){return this._data}get key(){return this._key}get roleMemberships(){return this._roleMemberships}static findAddress(e,r,s){return x.findProgramAddressSync([w.Buffer.from("role-member"),r.toBuffer(),s.toBuffer()],e.programId)}static decodeData(e,r){return g.decodeAccountWithRemaining(e,r,v,(s,i)=>{const t=s.readUInt32LE();return s=s.subarray(4),Array(t).fill(0).map((n,a)=>r.coder.types.decode("RoleMembership",s.subarray(E*a).subarray(0,E)))})}};v=re([g.staticImplements()],v);var te=Object.defineProperty,ne=Object.getOwnPropertyDescriptor,ie=(e,r,s,i)=>{for(var t=i>1?void 0:i?ne(r,s):r,n=e.length-1,a;n>=0;n--)(a=e[n])&&(t=(i?a(r,s,t):a(t))||t);return i&&t&&te(r,s,t),t};let j=class{constructor(e,r,s){this._data=e,this._key=r,this._roleMembers=s}static ACCOUNT_NAME="role";static MIN_DATA_SIZE=8+1+32+32+8+1+1;get data(){return this._data}get key(){return this._key}get roleMembers(){return this._roleMembers}static setName(e,r,s,i,t){const n=k(M(r,[e.programId],l.changeName()),l);if("error"in n)throw n.error;const{profileKey:a,key:m,keyIndex:o}=n,f=T.findAddress(e,s);return{instructions:async c=>[{instruction:await e.methods.setRoleName(o,w.Buffer.from(new TextEncoder().encode(i))).accountsStrict({funder:c.publicKey(),profile:a,name:f[0],systemProgram:I.programId,role:s}).remainingAccounts([{pubkey:m.publicKey(),isSigner:!0,isWritable:!1}].concat(p(t))).instruction().then(u=>h(u,t)),signers:[c,m]}],name:f}}static setAuthorizer(e,r,s,i,t){const n=k(M(r,[e.programId],l.changeName()),l);if("error"in n)throw n.error;const{profileKey:a,key:m,keyIndex:o}=n;return async f=>[{instruction:await e.methods.setRoleAuthorizer(o).accountsStrict({profile:a,funder:f.publicKey(),roleAccount:s,authorizer:i}).remainingAccounts([{pubkey:m.publicKey(),isSigner:!0,isWritable:!1}].concat(p(t))).instruction().then(c=>h(c,t)),signers:[f,m]}]}static joinRole(e,r,s,i){const{ownerKey:t,keyIndex:n,key:a}=W([e.programId,s.data.profile],l.joinRole(),r),m=v.findAddress(e,s.data.profile,t.key);return{instructions:async o=>[{instruction:await e.methods.joinRole(n).accountsStrict({funder:o.publicKey(),systemProgram:I.programId,newMember:t.key,roleMembershipAccount:m[0],roleAccount:s.key}).remainingAccounts([...a===null?[]:[{pubkey:a.publicKey(),isSigner:!0,isWritable:!1}]].concat(p(i))).instruction().then(f=>{const c=t.signer;if(c){const u=f.keys.find(d=>d.pubkey.equals(c.publicKey()));u&&(u.isSigner=!0)}return h(f,i)}),signers:[o,t.signer,a].filter(f=>!!f&&"publicKey"in f)}],roleMembership:m}}static leaveRole(e,r,s,i,t){const{ownerKey:n,keyIndex:a,key:m}=W([e.programId,s.data.profile],l.joinRole(),r),o=S(s.roleMembers,K.Active,n.key);if("error"in o)throw o.error;const{keyIndex:f}=o,c=S(i.roleMemberships,K.Active,s.key);if("error"in c)throw c.error;const{keyIndex:u}=c;return async d=>[{instruction:await e.methods.leaveRole(a,f,u).accountsStrict({funder:d.publicKey(),systemProgram:I.programId,member:n.key,roleMembershipAccount:i.key,roleAccount:s.key}).remainingAccounts([...m===null?[]:[{pubkey:m.publicKey(),isSigner:!0,isWritable:!1}]].concat(p(t))).instruction().then(y=>{const b=n.signer;if(b){const A=y.keys.find(R=>R.pubkey.equals(b.publicKey()));A&&(A.isSigner=!0)}return h(y,t)}),signers:[d,n.signer,m].filter(y=>!!y&&"publicKey"in y)}]}static setAcceptingNewMembers(e,r,s,i){const t=k(M(r,[e.programId,s],l.toggleAcceptingMembers()),l);if("error"in t)throw t.error;const{profileKey:n,key:a,keyIndex:m}=t;return async o=>[{instruction:await e.methods.setRoleAcceptingMembers(m).accountsStrict({profile:n,roleAccount:s}).remainingAccounts([{pubkey:a.publicKey(),isSigner:!0,isWritable:!1}].concat(p(i))).instruction().then(f=>h(f,i)),signers:[o,a]}]}static setNotAcceptingNewMembers(e,r,s,i){const t=k(M(r,[e.programId,s],l.toggleAcceptingMembers()),l);if("error"in t)throw t.error;const{profileKey:n,key:a,keyIndex:m}=t;return async o=>[{instruction:await e.methods.setRoleNotAcceptingMembers(m).accountsStrict({profile:n,roleAccount:s}).remainingAccounts([{pubkey:a.publicKey(),isSigner:!0,isWritable:!1}].concat(p(i))).instruction().then(f=>h(f,i)),signers:[o,a]}]}static inviteToRole(e,r,s,i,t){const n=k(M(r,[e.programId,s.key],l.toggleAcceptingMembers()),l);if("error"in n)throw n.error;const{profileKey:a,key:m,keyIndex:o}=n,f=v.findAddress(e,s.data.profile,i);return{instructions:async c=>[{instruction:await e.methods.inviteMemberToRole(o).accountsStrict({profile:a,roleAccount:s.key,funder:c.publicKey(),systemProgram:I.programId,newMember:i,roleMembershipAccount:f[0]}).remainingAccounts([{pubkey:m.publicKey(),isSigner:!0,isWritable:!1}].concat(p(t))).instruction().then(u=>h(u,t)),signers:[c,m]}],roleMembership:f}}static acceptInvite(e,r,s,i,t){const{ownerKey:n,keyIndex:a,key:m}=W([e.programId,s.data.profile],l.joinRole(),r),o=S(s.roleMembers,K.Inactive,n.key);if("error"in o)throw o.error;const{keyIndex:f}=o,c=S(i.roleMemberships,K.Inactive,s.key);if("error"in c)throw c.error;const{keyIndex:u}=c,d=v.findAddress(e,s.data.profile,n.key);return{instructions:async y=>[{instruction:await e.methods.acceptRoleInvitation(a,f,u).accountsStrict({newMember:n.key,roleAccount:s.key,roleMembershipAccount:d[0]}).remainingAccounts([...m===null?[]:[{pubkey:m.publicKey(),isSigner:!0,isWritable:!1}]].concat(p(t))).instruction().then(b=>{const A=n.signer;if(A){const R=b.keys.find(V=>V.pubkey.equals(A.publicKey()));R&&(R.isSigner=!0)}return h(b,t)}),signers:[y,n.signer,m].filter(b=>!!b&&"publicKey"in b)}],roleMembership:d}}static addExistingMemberToRole(e,r,s,i,t,n){const a=k(M(r,[e.programId,s.key],l.toggleAcceptingMembers()),l);if("error"in a)throw a.error;const{profileKey:m,key:o,keyIndex:f}=a,c=S(i.roleMemberships,K.Active);if("error"in c)throw c.error;const{keyIndex:u}=c,d=v.findAddress(e,s.data.profile,t);return{instructions:async y=>[{instruction:await e.methods.addExistingMemberToRole(f,u).accountsStrict({profile:m,newMember:t,roleAccount:s.key,roleMembershipAccount:i.key,funder:y.publicKey(),systemProgram:I.programId}).remainingAccounts([...o===null?[]:[{pubkey:o.publicKey(),isSigner:!0,isWritable:!1}]].concat(p(n))).instruction().then(A=>h(A,n)),signers:[y,o]}],roleMembership:d}}static removeMemberFromRole(e,r,s,i,t,n){const a=k(M(r,[e.programId,s.key],l.toggleAcceptingMembers()),l);if("error"in a)throw a.error;const{profileKey:m,key:o,keyIndex:f}=a,c=S(s.roleMembers,K.Active,t);if("error"in c)throw c.error;const{keyIndex:u}=c,d=S(i.roleMemberships,K.Active,s.key);if("error"in d)throw d.error;const{keyIndex:y}=d;return async b=>[{instruction:await e.methods.removeMemberFromRole(f,u,y).accountsStrict({profile:m,member:t,roleAccount:s.key,roleMembershipAccount:i.key,funder:b.publicKey(),systemProgram:I.programId}).remainingAccounts([...o===null?[]:[{pubkey:o.publicKey(),isSigner:!0,isWritable:!1}]].concat(p(n))).instruction().then(R=>h(R,n)),signers:[b,o]}]}static findAddress(e,r,s){return x.findProgramAddressSync([w.Buffer.from("profile-role"),r.toBuffer(),s.toArrayLike(w.Buffer,"le",8)],e.programId)}static decodeData(e,r){return g.decodeAccountWithRemaining(e,r,j,(s,i)=>{const t=s.readUint32LE();return s=s.subarray(4),Array(t).fill(0).map((n,a)=>r.coder.types.decode("RoleMembership",s.subarray(E*a).subarray(0,E)))})}};j=ie([g.staticImplements()],j);function W(e,r,s){if("profile"in s){const i=k(M(s.profile,e,r),l);if("error"in i)throw new Error(i.error);return{ownerKey:{key:i.profileKey},keyIndex:i.keyIndex,key:i.key}}else return{ownerKey:{key:s.key.publicKey(),signer:s.key},keyIndex:0,key:null}}function S(e,r=K.Active,s){const i=e.findIndex(t=>{const n=!s||t.key.equals(s),a=t.status===r;return n&&a});return i===-1?{error:"Role membership not found"}:{roleMembership:{key:e[i].key,status:r},keyIndex:i}}function h(e,r){const s=ae(r);return e.data=w.Buffer.concat([e.data,s]),e}function p(e){return(e==null?void 0:e.map(r=>({pubkey:r.extraProfilesOrRoles,isSigner:!1,isWritable:!1})))??[]}function ae(e){const r=w.Buffer.alloc(2*((e==null?void 0:e.length)??0));for(const[s,i]of(e??[]).entries())r.writeUint16LE(i.extraKeyIndexes,s*2);return r}var oe=Object.defineProperty,ce=Object.getOwnPropertyDescriptor,le=(e,r,s,i)=>{for(var t=i>1?void 0:i?ce(r,s):r,n=e.length-1,a;n>=0;n--)(a=e[n])&&(t=(i?a(r,s,t):a(t))||t);return i&&t&&oe(r,s,t),t};g.generateErrorMap(z);let F=class extends g.ListenProgram{constructor(e){super(e,{profile:N,playerName:T,role:j,roleMembership:v})}static buildProgram(e,r,s){return new P(z,e,r,s)}};F=le([g.staticImplements()],F);const de=$("sageStore",{state:()=>({is_loading:!0,playerProfile:{},game:new x("GameYNgVLn9kd8BQcbHm8jNMqJHWhcZ1YTNy6Pn3FXo5"),gameState:{},fleet:[],provider:{}}),getters:{programSage(){return new P(B.SAGE_IDL,U,this.provider)},programProfile(){return new P(z,C,D().get_provider)},programFaction(){return new P(G.PROFILE_FACTION_IDL,Z,this.provider)}},actions:{async init(){var r;console.log((r=q().publicKey.value)==null?void 0:r.toString());const e=q().publicKey.value;this.is_loading=!0,this.playerProfile=new x((await D().connection.getProgramAccounts(C,{filters:[{memcmp:{offset:30,bytes:e.toString()}}]}))[0].pubkey),this.fleet=[],this.fleet=(await g.readAllFromRPC(D().connection,this.programSage,B.Fleet)).map(s=>s.type==="ok"&&s.data),this.is_loading=!1}}});export{N as P,de as u};
